apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"

uploadArchives.enabled = false

configurations {
    jarOnly
}

dependencies {
    compile rootProject
    
    modularConfiguration project(path: rootProject.path, configuration: 'modularConfiguration')
    
    rootProject.subprojects.each { subproject ->
        if(subproject != project && !project.subprojects.contains(subproject)) {
            compile subproject
            modularConfiguration project(path: subproject.path, configuration: 'modularConfiguration')
        }
    }
    
    modularConfiguration("org.springframework.session:spring-session:1.3.1.1.GPT_RELEASE")
    
    modularConfiguration("org.springframework.boot:spring-boot-starter-web")
    
    modularConfiguration("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    
    modularConfiguration('com.netflix.hystrix:hystrix-metrics-event-stream:1.5.12')
    modularConfiguration('de.codecentric:spring-boot-admin-starter-client:1.5.4')
    
//    compile("org.springframework.boot:spring-boot-starter-actuator")

    provided("org.springframework.boot:spring-boot-devtools")
    
    jarOnly('com.zaxxer:HikariCP:2.5.1') {
        transitive = false                    
    }
    
    jarOnly (
        [group: 'com.oracle',               name: 'ojdbc',                          version: '12.1.0.1.0'],
        [group: 'mysql',                    name: 'mysql-connector-java',           version: '5.1.42'],
    )
	
	modularConfiguration configurations.jarOnly.allDependencies
	
    compile configurations.modularConfiguration.allDependencies
}

springBoot {
    // Stand alone only, specify this so we can set the classpath externally, e.g: -Dloader.path="configs/"
    layout = "ZIP"
}

jar {
    manifest.attributes  'Implementation-Title': "GPCash"
    manifest.attributes  'Implementation-Version': version
}

springBoot {
    buildInfo()
}

bootRepackage {
    // tell the springboot repackage to use modularConfiguration for repackaging process
    customConfiguration = "modularConfiguration"
}

bootRun {
    jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
}